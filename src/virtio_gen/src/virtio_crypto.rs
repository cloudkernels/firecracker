/* automatically generated by rust-bindgen */

pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const VIRTIO_ID_NET: u32 = 1;
pub const VIRTIO_ID_BLOCK: u32 = 2;
pub const VIRTIO_ID_CONSOLE: u32 = 3;
pub const VIRTIO_ID_RNG: u32 = 4;
pub const VIRTIO_ID_BALLOON: u32 = 5;
pub const VIRTIO_ID_RPMSG: u32 = 7;
pub const VIRTIO_ID_SCSI: u32 = 8;
pub const VIRTIO_ID_9P: u32 = 9;
pub const VIRTIO_ID_RPROC_SERIAL: u32 = 11;
pub const VIRTIO_ID_CAIF: u32 = 12;
pub const VIRTIO_ID_GPU: u32 = 16;
pub const VIRTIO_ID_INPUT: u32 = 18;
pub const VIRTIO_ID_VSOCK: u32 = 19;
/* Added manually crypto id */
pub const VIRTIO_ID_CRYPTO: u32 = 20;
pub const VIRTIO_CONFIG_S_ACKNOWLEDGE: u32 = 1;
pub const VIRTIO_CONFIG_S_DRIVER: u32 = 2;
pub const VIRTIO_CONFIG_S_DRIVER_OK: u32 = 4;
pub const VIRTIO_CONFIG_S_FEATURES_OK: u32 = 8;
pub const VIRTIO_CONFIG_S_NEEDS_RESET: u32 = 64;
pub const VIRTIO_CONFIG_S_FAILED: u32 = 128;
pub const VIRTIO_TRANSPORT_F_START: u32 = 28;
pub const VIRTIO_TRANSPORT_F_END: u32 = 34;
pub const VIRTIO_F_NOTIFY_ON_EMPTY: u32 = 24;
pub const VIRTIO_F_ANY_LAYOUT: u32 = 27;
pub const VIRTIO_F_VERSION_1: u32 = 32;
pub const VIRTIO_F_IOMMU_PLATFORM: u32 = 33;
pub const VIRTIO_CRYPTO_SERVICE_CIPHER: u32 = 0;
pub const VIRTIO_CRYPTO_SERVICE_HASH: u32 = 1;
pub const VIRTIO_CRYPTO_SERVICE_MAC: u32 = 2;
pub const VIRTIO_CRYPTO_SERVICE_AEAD: u32 = 3;
pub const VIRTIO_CRYPTO_NO_CIPHER: u32 = 0;
pub const VIRTIO_CRYPTO_CIPHER_ARC4: u32 = 1;
pub const VIRTIO_CRYPTO_CIPHER_AES_ECB: u32 = 2;
pub const VIRTIO_CRYPTO_CIPHER_AES_CBC: u32 = 3;
pub const VIRTIO_CRYPTO_CIPHER_AES_CTR: u32 = 4;
pub const VIRTIO_CRYPTO_CIPHER_DES_ECB: u32 = 5;
pub const VIRTIO_CRYPTO_CIPHER_DES_CBC: u32 = 6;
pub const VIRTIO_CRYPTO_CIPHER_3DES_ECB: u32 = 7;
pub const VIRTIO_CRYPTO_CIPHER_3DES_CBC: u32 = 8;
pub const VIRTIO_CRYPTO_CIPHER_3DES_CTR: u32 = 9;
pub const VIRTIO_CRYPTO_CIPHER_KASUMI_F8: u32 = 10;
pub const VIRTIO_CRYPTO_CIPHER_SNOW3G_UEA2: u32 = 11;
pub const VIRTIO_CRYPTO_CIPHER_AES_F8: u32 = 12;
pub const VIRTIO_CRYPTO_CIPHER_AES_XTS: u32 = 13;
pub const VIRTIO_CRYPTO_CIPHER_ZUC_EEA3: u32 = 14;
pub const VIRTIO_CRYPTO_OP_ENCRYPT: u32 = 1;
pub const VIRTIO_CRYPTO_OP_DECRYPT: u32 = 2;
pub const VIRTIO_CRYPTO_NO_HASH: u32 = 0;
pub const VIRTIO_CRYPTO_HASH_MD5: u32 = 1;
pub const VIRTIO_CRYPTO_HASH_SHA1: u32 = 2;
pub const VIRTIO_CRYPTO_HASH_SHA_224: u32 = 3;
pub const VIRTIO_CRYPTO_HASH_SHA_256: u32 = 4;
pub const VIRTIO_CRYPTO_HASH_SHA_384: u32 = 5;
pub const VIRTIO_CRYPTO_HASH_SHA_512: u32 = 6;
pub const VIRTIO_CRYPTO_HASH_SHA3_224: u32 = 7;
pub const VIRTIO_CRYPTO_HASH_SHA3_256: u32 = 8;
pub const VIRTIO_CRYPTO_HASH_SHA3_384: u32 = 9;
pub const VIRTIO_CRYPTO_HASH_SHA3_512: u32 = 10;
pub const VIRTIO_CRYPTO_HASH_SHA3_SHAKE128: u32 = 11;
pub const VIRTIO_CRYPTO_HASH_SHA3_SHAKE256: u32 = 12;
pub const VIRTIO_CRYPTO_NO_MAC: u32 = 0;
pub const VIRTIO_CRYPTO_MAC_HMAC_MD5: u32 = 1;
pub const VIRTIO_CRYPTO_MAC_HMAC_SHA1: u32 = 2;
pub const VIRTIO_CRYPTO_MAC_HMAC_SHA_224: u32 = 3;
pub const VIRTIO_CRYPTO_MAC_HMAC_SHA_256: u32 = 4;
pub const VIRTIO_CRYPTO_MAC_HMAC_SHA_384: u32 = 5;
pub const VIRTIO_CRYPTO_MAC_HMAC_SHA_512: u32 = 6;
pub const VIRTIO_CRYPTO_MAC_CMAC_3DES: u32 = 25;
pub const VIRTIO_CRYPTO_MAC_CMAC_AES: u32 = 26;
pub const VIRTIO_CRYPTO_MAC_KASUMI_F9: u32 = 27;
pub const VIRTIO_CRYPTO_MAC_SNOW3G_UIA2: u32 = 28;
pub const VIRTIO_CRYPTO_MAC_GMAC_AES: u32 = 41;
pub const VIRTIO_CRYPTO_MAC_GMAC_TWOFISH: u32 = 42;
pub const VIRTIO_CRYPTO_MAC_CBCMAC_AES: u32 = 49;
pub const VIRTIO_CRYPTO_MAC_CBCMAC_KASUMI_F9: u32 = 50;
pub const VIRTIO_CRYPTO_MAC_XCBC_AES: u32 = 53;
pub const VIRTIO_CRYPTO_NO_AEAD: u32 = 0;
pub const VIRTIO_CRYPTO_AEAD_GCM: u32 = 1;
pub const VIRTIO_CRYPTO_AEAD_CCM: u32 = 2;
pub const VIRTIO_CRYPTO_AEAD_CHACHA20_POLY1305: u32 = 3;
pub const VIRTIO_CRYPTO_SYM_ALG_CHAIN_ORDER_HASH_THEN_CIPHER: u32 = 1;
pub const VIRTIO_CRYPTO_SYM_ALG_CHAIN_ORDER_CIPHER_THEN_HASH: u32 = 2;
pub const VIRTIO_CRYPTO_SYM_HASH_MODE_PLAIN: u32 = 1;
pub const VIRTIO_CRYPTO_SYM_HASH_MODE_AUTH: u32 = 2;
pub const VIRTIO_CRYPTO_SYM_HASH_MODE_NESTED: u32 = 3;
pub const VIRTIO_CRYPTO_SYM_OP_NONE: u32 = 0;
pub const VIRTIO_CRYPTO_SYM_OP_CIPHER: u32 = 1;
pub const VIRTIO_CRYPTO_SYM_OP_ALGORITHM_CHAINING: u32 = 2;
pub const VIRTIO_CRYPTO_OK: u32 = 0;
pub const VIRTIO_CRYPTO_ERR: u32 = 1;
pub const VIRTIO_CRYPTO_BADMSG: u32 = 2;
pub const VIRTIO_CRYPTO_NOTSUPP: u32 = 3;
pub const VIRTIO_CRYPTO_INVSESS: u32 = 4;
pub const VIRTIO_CRYPTO_S_HW_READY: u32 = 1;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fsid_t>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __virtio16 = __u16;
pub type __virtio32 = __u32;
pub type __virtio64 = __u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct virtio_crypto_ctrl_header {
    pub opcode: __le32,
    pub algo: __le32,
    pub flag: __le32,
    pub queue_id: __le32,
}
#[test]
fn bindgen_test_layout_virtio_crypto_ctrl_header() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_ctrl_header>(),
        16usize,
        concat!("Size of: ", stringify!(virtio_crypto_ctrl_header))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_ctrl_header>(),
        4usize,
        concat!("Alignment of ", stringify!(virtio_crypto_ctrl_header))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_ctrl_header>())).opcode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_ctrl_header),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_crypto_ctrl_header>())).algo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_ctrl_header),
            "::",
            stringify!(algo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_crypto_ctrl_header>())).flag as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_ctrl_header),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_ctrl_header>())).queue_id as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_ctrl_header),
            "::",
            stringify!(queue_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct virtio_crypto_cipher_session_para {
    pub algo: __le32,
    pub keylen: __le32,
    pub op: __le32,
    pub padding: __le32,
}
#[test]
fn bindgen_test_layout_virtio_crypto_cipher_session_para() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_cipher_session_para>(),
        16usize,
        concat!("Size of: ", stringify!(virtio_crypto_cipher_session_para))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_cipher_session_para>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(virtio_crypto_cipher_session_para)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_cipher_session_para>())).algo as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_cipher_session_para),
            "::",
            stringify!(algo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_cipher_session_para>())).keylen as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_cipher_session_para),
            "::",
            stringify!(keylen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_cipher_session_para>())).op as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_cipher_session_para),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_cipher_session_para>())).padding as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_cipher_session_para),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct virtio_crypto_session_input {
    pub session_id: __le64,
    pub status: __le32,
    pub padding: __le32,
}
#[test]
fn bindgen_test_layout_virtio_crypto_session_input() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_session_input>(),
        16usize,
        concat!("Size of: ", stringify!(virtio_crypto_session_input))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_session_input>(),
        8usize,
        concat!("Alignment of ", stringify!(virtio_crypto_session_input))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_session_input>())).session_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_session_input),
            "::",
            stringify!(session_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_session_input>())).status as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_session_input),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_session_input>())).padding as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_session_input),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct virtio_crypto_cipher_session_req {
    pub para: virtio_crypto_cipher_session_para,
    pub padding: [__u8; 32usize],
}
#[test]
fn bindgen_test_layout_virtio_crypto_cipher_session_req() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_cipher_session_req>(),
        48usize,
        concat!("Size of: ", stringify!(virtio_crypto_cipher_session_req))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_cipher_session_req>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(virtio_crypto_cipher_session_req)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_cipher_session_req>())).para as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_cipher_session_req),
            "::",
            stringify!(para)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_cipher_session_req>())).padding as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_cipher_session_req),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct virtio_crypto_hash_session_para {
    pub algo: __le32,
    pub hash_result_len: __le32,
    pub padding: [__u8; 8usize],
}
#[test]
fn bindgen_test_layout_virtio_crypto_hash_session_para() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_hash_session_para>(),
        16usize,
        concat!("Size of: ", stringify!(virtio_crypto_hash_session_para))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_hash_session_para>(),
        4usize,
        concat!("Alignment of ", stringify!(virtio_crypto_hash_session_para))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_hash_session_para>())).algo as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_hash_session_para),
            "::",
            stringify!(algo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_hash_session_para>())).hash_result_len as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_hash_session_para),
            "::",
            stringify!(hash_result_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_hash_session_para>())).padding as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_hash_session_para),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct virtio_crypto_hash_create_session_req {
    pub para: virtio_crypto_hash_session_para,
    pub padding: [__u8; 40usize],
}
#[test]
fn bindgen_test_layout_virtio_crypto_hash_create_session_req() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_hash_create_session_req>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(virtio_crypto_hash_create_session_req)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_hash_create_session_req>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(virtio_crypto_hash_create_session_req)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_hash_create_session_req>())).para as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_hash_create_session_req),
            "::",
            stringify!(para)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_hash_create_session_req>())).padding as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_hash_create_session_req),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct virtio_crypto_mac_session_para {
    pub algo: __le32,
    pub hash_result_len: __le32,
    pub auth_key_len: __le32,
    pub padding: __le32,
}
#[test]
fn bindgen_test_layout_virtio_crypto_mac_session_para() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_mac_session_para>(),
        16usize,
        concat!("Size of: ", stringify!(virtio_crypto_mac_session_para))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_mac_session_para>(),
        4usize,
        concat!("Alignment of ", stringify!(virtio_crypto_mac_session_para))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_mac_session_para>())).algo as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_mac_session_para),
            "::",
            stringify!(algo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_mac_session_para>())).hash_result_len as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_mac_session_para),
            "::",
            stringify!(hash_result_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_mac_session_para>())).auth_key_len as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_mac_session_para),
            "::",
            stringify!(auth_key_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_mac_session_para>())).padding as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_mac_session_para),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct virtio_crypto_mac_create_session_req {
    pub para: virtio_crypto_mac_session_para,
    pub padding: [__u8; 40usize],
}
#[test]
fn bindgen_test_layout_virtio_crypto_mac_create_session_req() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_mac_create_session_req>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(virtio_crypto_mac_create_session_req)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_mac_create_session_req>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(virtio_crypto_mac_create_session_req)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_mac_create_session_req>())).para as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_mac_create_session_req),
            "::",
            stringify!(para)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_mac_create_session_req>())).padding as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_mac_create_session_req),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct virtio_crypto_aead_session_para {
    pub algo: __le32,
    pub key_len: __le32,
    pub hash_result_len: __le32,
    pub aad_len: __le32,
    pub op: __le32,
    pub padding: __le32,
}
#[test]
fn bindgen_test_layout_virtio_crypto_aead_session_para() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_aead_session_para>(),
        24usize,
        concat!("Size of: ", stringify!(virtio_crypto_aead_session_para))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_aead_session_para>(),
        4usize,
        concat!("Alignment of ", stringify!(virtio_crypto_aead_session_para))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_aead_session_para>())).algo as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_aead_session_para),
            "::",
            stringify!(algo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_aead_session_para>())).key_len as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_aead_session_para),
            "::",
            stringify!(key_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_aead_session_para>())).hash_result_len as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_aead_session_para),
            "::",
            stringify!(hash_result_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_aead_session_para>())).aad_len as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_aead_session_para),
            "::",
            stringify!(aad_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_aead_session_para>())).op as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_aead_session_para),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_aead_session_para>())).padding as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_aead_session_para),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct virtio_crypto_aead_create_session_req {
    pub para: virtio_crypto_aead_session_para,
    pub padding: [__u8; 32usize],
}
#[test]
fn bindgen_test_layout_virtio_crypto_aead_create_session_req() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_aead_create_session_req>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(virtio_crypto_aead_create_session_req)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_aead_create_session_req>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(virtio_crypto_aead_create_session_req)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_aead_create_session_req>())).para as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_aead_create_session_req),
            "::",
            stringify!(para)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_aead_create_session_req>())).padding as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_aead_create_session_req),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct virtio_crypto_alg_chain_session_para {
    pub alg_chain_order: __le32,
    pub hash_mode: __le32,
    pub cipher_param: virtio_crypto_cipher_session_para,
    pub u: virtio_crypto_alg_chain_session_para__bindgen_ty_1,
    pub aad_len: __le32,
    pub padding: __le32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union virtio_crypto_alg_chain_session_para__bindgen_ty_1 {
    pub hash_param: virtio_crypto_hash_session_para,
    pub mac_param: virtio_crypto_mac_session_para,
    pub padding: [__u8; 16usize],
    _bindgen_union_align: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_virtio_crypto_alg_chain_session_para__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_alg_chain_session_para__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(virtio_crypto_alg_chain_session_para__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_alg_chain_session_para__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(virtio_crypto_alg_chain_session_para__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_alg_chain_session_para__bindgen_ty_1>()))
                .hash_param as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_alg_chain_session_para__bindgen_ty_1),
            "::",
            stringify!(hash_param)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_alg_chain_session_para__bindgen_ty_1>())).mac_param
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_alg_chain_session_para__bindgen_ty_1),
            "::",
            stringify!(mac_param)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_alg_chain_session_para__bindgen_ty_1>())).padding
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_alg_chain_session_para__bindgen_ty_1),
            "::",
            stringify!(padding)
        )
    );
}
#[test]
fn bindgen_test_layout_virtio_crypto_alg_chain_session_para() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_alg_chain_session_para>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(virtio_crypto_alg_chain_session_para)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_alg_chain_session_para>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(virtio_crypto_alg_chain_session_para)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_alg_chain_session_para>())).alg_chain_order
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_alg_chain_session_para),
            "::",
            stringify!(alg_chain_order)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_alg_chain_session_para>())).hash_mode as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_alg_chain_session_para),
            "::",
            stringify!(hash_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_alg_chain_session_para>())).cipher_param
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_alg_chain_session_para),
            "::",
            stringify!(cipher_param)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_alg_chain_session_para>())).u as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_alg_chain_session_para),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_alg_chain_session_para>())).aad_len as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_alg_chain_session_para),
            "::",
            stringify!(aad_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_alg_chain_session_para>())).padding as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_alg_chain_session_para),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct virtio_crypto_alg_chain_session_req {
    pub para: virtio_crypto_alg_chain_session_para,
}
#[test]
fn bindgen_test_layout_virtio_crypto_alg_chain_session_req() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_alg_chain_session_req>(),
        48usize,
        concat!("Size of: ", stringify!(virtio_crypto_alg_chain_session_req))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_alg_chain_session_req>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(virtio_crypto_alg_chain_session_req)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_alg_chain_session_req>())).para as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_alg_chain_session_req),
            "::",
            stringify!(para)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct virtio_crypto_sym_create_session_req {
    pub u: virtio_crypto_sym_create_session_req__bindgen_ty_1,
    pub op_type: __le32,
    pub padding: __le32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union virtio_crypto_sym_create_session_req__bindgen_ty_1 {
    pub cipher: virtio_crypto_cipher_session_req,
    pub chain: virtio_crypto_alg_chain_session_req,
    pub padding: [__u8; 48usize],
    _bindgen_union_align: [u32; 12usize],
}
#[test]
fn bindgen_test_layout_virtio_crypto_sym_create_session_req__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_sym_create_session_req__bindgen_ty_1>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(virtio_crypto_sym_create_session_req__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_sym_create_session_req__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(virtio_crypto_sym_create_session_req__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_sym_create_session_req__bindgen_ty_1>())).cipher
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_sym_create_session_req__bindgen_ty_1),
            "::",
            stringify!(cipher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_sym_create_session_req__bindgen_ty_1>())).chain
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_sym_create_session_req__bindgen_ty_1),
            "::",
            stringify!(chain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_sym_create_session_req__bindgen_ty_1>())).padding
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_sym_create_session_req__bindgen_ty_1),
            "::",
            stringify!(padding)
        )
    );
}
#[test]
fn bindgen_test_layout_virtio_crypto_sym_create_session_req() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_sym_create_session_req>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(virtio_crypto_sym_create_session_req)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_sym_create_session_req>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(virtio_crypto_sym_create_session_req)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_sym_create_session_req>())).u as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_sym_create_session_req),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_sym_create_session_req>())).op_type as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_sym_create_session_req),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_sym_create_session_req>())).padding as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_sym_create_session_req),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct virtio_crypto_destroy_session_req {
    pub session_id: __le64,
    pub padding: [__u8; 48usize],
}
#[test]
fn bindgen_test_layout_virtio_crypto_destroy_session_req() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_destroy_session_req>(),
        56usize,
        concat!("Size of: ", stringify!(virtio_crypto_destroy_session_req))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_destroy_session_req>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(virtio_crypto_destroy_session_req)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_destroy_session_req>())).session_id as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_destroy_session_req),
            "::",
            stringify!(session_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_destroy_session_req>())).padding as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_destroy_session_req),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct virtio_crypto_op_ctrl_req {
    pub header: virtio_crypto_ctrl_header,
    pub u: virtio_crypto_op_ctrl_req__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union virtio_crypto_op_ctrl_req__bindgen_ty_1 {
    pub sym_create_session: virtio_crypto_sym_create_session_req,
    pub hash_create_session: virtio_crypto_hash_create_session_req,
    pub mac_create_session: virtio_crypto_mac_create_session_req,
    pub aead_create_session: virtio_crypto_aead_create_session_req,
    pub destroy_session: virtio_crypto_destroy_session_req,
    pub padding: [__u8; 56usize],
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_virtio_crypto_op_ctrl_req__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_op_ctrl_req__bindgen_ty_1>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(virtio_crypto_op_ctrl_req__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_op_ctrl_req__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(virtio_crypto_op_ctrl_req__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_op_ctrl_req__bindgen_ty_1>())).sym_create_session
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_op_ctrl_req__bindgen_ty_1),
            "::",
            stringify!(sym_create_session)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_op_ctrl_req__bindgen_ty_1>())).hash_create_session
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_op_ctrl_req__bindgen_ty_1),
            "::",
            stringify!(hash_create_session)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_op_ctrl_req__bindgen_ty_1>())).mac_create_session
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_op_ctrl_req__bindgen_ty_1),
            "::",
            stringify!(mac_create_session)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_op_ctrl_req__bindgen_ty_1>())).aead_create_session
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_op_ctrl_req__bindgen_ty_1),
            "::",
            stringify!(aead_create_session)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_op_ctrl_req__bindgen_ty_1>())).destroy_session
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_op_ctrl_req__bindgen_ty_1),
            "::",
            stringify!(destroy_session)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_op_ctrl_req__bindgen_ty_1>())).padding as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_op_ctrl_req__bindgen_ty_1),
            "::",
            stringify!(padding)
        )
    );
}
#[test]
fn bindgen_test_layout_virtio_crypto_op_ctrl_req() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_op_ctrl_req>(),
        72usize,
        concat!("Size of: ", stringify!(virtio_crypto_op_ctrl_req))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_op_ctrl_req>(),
        8usize,
        concat!("Alignment of ", stringify!(virtio_crypto_op_ctrl_req))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_op_ctrl_req>())).header as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_op_ctrl_req),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_crypto_op_ctrl_req>())).u as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_op_ctrl_req),
            "::",
            stringify!(u)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct virtio_crypto_op_header {
    pub opcode: __le32,
    pub algo: __le32,
    pub session_id: __le64,
    pub flag: __le32,
    pub padding: __le32,
}
#[test]
fn bindgen_test_layout_virtio_crypto_op_header() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_op_header>(),
        24usize,
        concat!("Size of: ", stringify!(virtio_crypto_op_header))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_op_header>(),
        8usize,
        concat!("Alignment of ", stringify!(virtio_crypto_op_header))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_crypto_op_header>())).opcode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_op_header),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_crypto_op_header>())).algo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_op_header),
            "::",
            stringify!(algo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_op_header>())).session_id as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_op_header),
            "::",
            stringify!(session_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_crypto_op_header>())).flag as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_op_header),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_crypto_op_header>())).padding as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_op_header),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct virtio_crypto_cipher_para {
    pub iv_len: __le32,
    pub src_data_len: __le32,
    pub dst_data_len: __le32,
    pub padding: __le32,
}
#[test]
fn bindgen_test_layout_virtio_crypto_cipher_para() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_cipher_para>(),
        16usize,
        concat!("Size of: ", stringify!(virtio_crypto_cipher_para))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_cipher_para>(),
        4usize,
        concat!("Alignment of ", stringify!(virtio_crypto_cipher_para))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_cipher_para>())).iv_len as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_cipher_para),
            "::",
            stringify!(iv_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_cipher_para>())).src_data_len as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_cipher_para),
            "::",
            stringify!(src_data_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_cipher_para>())).dst_data_len as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_cipher_para),
            "::",
            stringify!(dst_data_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_cipher_para>())).padding as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_cipher_para),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct virtio_crypto_hash_para {
    pub src_data_len: __le32,
    pub hash_result_len: __le32,
}
#[test]
fn bindgen_test_layout_virtio_crypto_hash_para() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_hash_para>(),
        8usize,
        concat!("Size of: ", stringify!(virtio_crypto_hash_para))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_hash_para>(),
        4usize,
        concat!("Alignment of ", stringify!(virtio_crypto_hash_para))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_hash_para>())).src_data_len as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_hash_para),
            "::",
            stringify!(src_data_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_hash_para>())).hash_result_len as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_hash_para),
            "::",
            stringify!(hash_result_len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct virtio_crypto_mac_para {
    pub hash: virtio_crypto_hash_para,
}
#[test]
fn bindgen_test_layout_virtio_crypto_mac_para() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_mac_para>(),
        8usize,
        concat!("Size of: ", stringify!(virtio_crypto_mac_para))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_mac_para>(),
        4usize,
        concat!("Alignment of ", stringify!(virtio_crypto_mac_para))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_crypto_mac_para>())).hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_mac_para),
            "::",
            stringify!(hash)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct virtio_crypto_aead_para {
    pub iv_len: __le32,
    pub aad_len: __le32,
    pub src_data_len: __le32,
    pub dst_data_len: __le32,
}
#[test]
fn bindgen_test_layout_virtio_crypto_aead_para() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_aead_para>(),
        16usize,
        concat!("Size of: ", stringify!(virtio_crypto_aead_para))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_aead_para>(),
        4usize,
        concat!("Alignment of ", stringify!(virtio_crypto_aead_para))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_crypto_aead_para>())).iv_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_aead_para),
            "::",
            stringify!(iv_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_crypto_aead_para>())).aad_len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_aead_para),
            "::",
            stringify!(aad_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_aead_para>())).src_data_len as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_aead_para),
            "::",
            stringify!(src_data_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_aead_para>())).dst_data_len as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_aead_para),
            "::",
            stringify!(dst_data_len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct virtio_crypto_cipher_data_req {
    pub para: virtio_crypto_cipher_para,
    pub padding: [__u8; 24usize],
}
#[test]
fn bindgen_test_layout_virtio_crypto_cipher_data_req() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_cipher_data_req>(),
        40usize,
        concat!("Size of: ", stringify!(virtio_crypto_cipher_data_req))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_cipher_data_req>(),
        4usize,
        concat!("Alignment of ", stringify!(virtio_crypto_cipher_data_req))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_cipher_data_req>())).para as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_cipher_data_req),
            "::",
            stringify!(para)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_cipher_data_req>())).padding as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_cipher_data_req),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct virtio_crypto_hash_data_req {
    pub para: virtio_crypto_hash_para,
    pub padding: [__u8; 40usize],
}
#[test]
fn bindgen_test_layout_virtio_crypto_hash_data_req() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_hash_data_req>(),
        48usize,
        concat!("Size of: ", stringify!(virtio_crypto_hash_data_req))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_hash_data_req>(),
        4usize,
        concat!("Alignment of ", stringify!(virtio_crypto_hash_data_req))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_hash_data_req>())).para as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_hash_data_req),
            "::",
            stringify!(para)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_hash_data_req>())).padding as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_hash_data_req),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct virtio_crypto_mac_data_req {
    pub para: virtio_crypto_mac_para,
    pub padding: [__u8; 40usize],
}
#[test]
fn bindgen_test_layout_virtio_crypto_mac_data_req() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_mac_data_req>(),
        48usize,
        concat!("Size of: ", stringify!(virtio_crypto_mac_data_req))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_mac_data_req>(),
        4usize,
        concat!("Alignment of ", stringify!(virtio_crypto_mac_data_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_crypto_mac_data_req>())).para as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_mac_data_req),
            "::",
            stringify!(para)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_mac_data_req>())).padding as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_mac_data_req),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct virtio_crypto_alg_chain_data_para {
    pub iv_len: __le32,
    pub src_data_len: __le32,
    pub dst_data_len: __le32,
    pub cipher_start_src_offset: __le32,
    pub len_to_cipher: __le32,
    pub hash_start_src_offset: __le32,
    pub len_to_hash: __le32,
    pub aad_len: __le32,
    pub hash_result_len: __le32,
    pub reserved: __le32,
}
#[test]
fn bindgen_test_layout_virtio_crypto_alg_chain_data_para() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_alg_chain_data_para>(),
        40usize,
        concat!("Size of: ", stringify!(virtio_crypto_alg_chain_data_para))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_alg_chain_data_para>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(virtio_crypto_alg_chain_data_para)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_alg_chain_data_para>())).iv_len as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_alg_chain_data_para),
            "::",
            stringify!(iv_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_alg_chain_data_para>())).src_data_len as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_alg_chain_data_para),
            "::",
            stringify!(src_data_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_alg_chain_data_para>())).dst_data_len as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_alg_chain_data_para),
            "::",
            stringify!(dst_data_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_alg_chain_data_para>())).cipher_start_src_offset
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_alg_chain_data_para),
            "::",
            stringify!(cipher_start_src_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_alg_chain_data_para>())).len_to_cipher as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_alg_chain_data_para),
            "::",
            stringify!(len_to_cipher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_alg_chain_data_para>())).hash_start_src_offset
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_alg_chain_data_para),
            "::",
            stringify!(hash_start_src_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_alg_chain_data_para>())).len_to_hash as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_alg_chain_data_para),
            "::",
            stringify!(len_to_hash)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_alg_chain_data_para>())).aad_len as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_alg_chain_data_para),
            "::",
            stringify!(aad_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_alg_chain_data_para>())).hash_result_len
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_alg_chain_data_para),
            "::",
            stringify!(hash_result_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_alg_chain_data_para>())).reserved as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_alg_chain_data_para),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct virtio_crypto_alg_chain_data_req {
    pub para: virtio_crypto_alg_chain_data_para,
}
#[test]
fn bindgen_test_layout_virtio_crypto_alg_chain_data_req() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_alg_chain_data_req>(),
        40usize,
        concat!("Size of: ", stringify!(virtio_crypto_alg_chain_data_req))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_alg_chain_data_req>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(virtio_crypto_alg_chain_data_req)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_alg_chain_data_req>())).para as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_alg_chain_data_req),
            "::",
            stringify!(para)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct virtio_crypto_sym_data_req {
    pub u: virtio_crypto_sym_data_req__bindgen_ty_1,
    pub op_type: __le32,
    pub padding: __le32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union virtio_crypto_sym_data_req__bindgen_ty_1 {
    pub cipher: virtio_crypto_cipher_data_req,
    pub chain: virtio_crypto_alg_chain_data_req,
    pub padding: [__u8; 40usize],
    _bindgen_union_align: [u32; 10usize],
}
#[test]
fn bindgen_test_layout_virtio_crypto_sym_data_req__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_sym_data_req__bindgen_ty_1>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(virtio_crypto_sym_data_req__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_sym_data_req__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(virtio_crypto_sym_data_req__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_sym_data_req__bindgen_ty_1>())).cipher as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_sym_data_req__bindgen_ty_1),
            "::",
            stringify!(cipher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_sym_data_req__bindgen_ty_1>())).chain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_sym_data_req__bindgen_ty_1),
            "::",
            stringify!(chain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_sym_data_req__bindgen_ty_1>())).padding as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_sym_data_req__bindgen_ty_1),
            "::",
            stringify!(padding)
        )
    );
}
#[test]
fn bindgen_test_layout_virtio_crypto_sym_data_req() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_sym_data_req>(),
        48usize,
        concat!("Size of: ", stringify!(virtio_crypto_sym_data_req))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_sym_data_req>(),
        4usize,
        concat!("Alignment of ", stringify!(virtio_crypto_sym_data_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_crypto_sym_data_req>())).u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_sym_data_req),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_sym_data_req>())).op_type as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_sym_data_req),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_sym_data_req>())).padding as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_sym_data_req),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct virtio_crypto_aead_data_req {
    pub para: virtio_crypto_aead_para,
    pub padding: [__u8; 32usize],
}
#[test]
fn bindgen_test_layout_virtio_crypto_aead_data_req() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_aead_data_req>(),
        48usize,
        concat!("Size of: ", stringify!(virtio_crypto_aead_data_req))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_aead_data_req>(),
        4usize,
        concat!("Alignment of ", stringify!(virtio_crypto_aead_data_req))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_aead_data_req>())).para as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_aead_data_req),
            "::",
            stringify!(para)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_aead_data_req>())).padding as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_aead_data_req),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct virtio_crypto_op_data_req {
    pub header: virtio_crypto_op_header,
    pub u: virtio_crypto_op_data_req__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union virtio_crypto_op_data_req__bindgen_ty_1 {
    pub sym_req: virtio_crypto_sym_data_req,
    pub hash_req: virtio_crypto_hash_data_req,
    pub mac_req: virtio_crypto_mac_data_req,
    pub aead_req: virtio_crypto_aead_data_req,
    pub padding: [__u8; 48usize],
    _bindgen_union_align: [u32; 12usize],
}
#[test]
fn bindgen_test_layout_virtio_crypto_op_data_req__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_op_data_req__bindgen_ty_1>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(virtio_crypto_op_data_req__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_op_data_req__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(virtio_crypto_op_data_req__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_op_data_req__bindgen_ty_1>())).sym_req as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_op_data_req__bindgen_ty_1),
            "::",
            stringify!(sym_req)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_op_data_req__bindgen_ty_1>())).hash_req as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_op_data_req__bindgen_ty_1),
            "::",
            stringify!(hash_req)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_op_data_req__bindgen_ty_1>())).mac_req as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_op_data_req__bindgen_ty_1),
            "::",
            stringify!(mac_req)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_op_data_req__bindgen_ty_1>())).aead_req as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_op_data_req__bindgen_ty_1),
            "::",
            stringify!(aead_req)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_op_data_req__bindgen_ty_1>())).padding as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_op_data_req__bindgen_ty_1),
            "::",
            stringify!(padding)
        )
    );
}
#[test]
fn bindgen_test_layout_virtio_crypto_op_data_req() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_op_data_req>(),
        72usize,
        concat!("Size of: ", stringify!(virtio_crypto_op_data_req))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_op_data_req>(),
        8usize,
        concat!("Alignment of ", stringify!(virtio_crypto_op_data_req))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_op_data_req>())).header as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_op_data_req),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_crypto_op_data_req>())).u as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_op_data_req),
            "::",
            stringify!(u)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct virtio_crypto_config {
    pub status: __u32,
    pub max_dataqueues: __u32,
    pub crypto_services: __u32,
    pub cipher_algo_l: __u32,
    pub cipher_algo_h: __u32,
    pub hash_algo: __u32,
    pub mac_algo_l: __u32,
    pub mac_algo_h: __u32,
    pub aead_algo: __u32,
    pub max_cipher_key_len: __u32,
    pub max_auth_key_len: __u32,
    pub reserve: __u32,
    pub max_size: __u64,
}
#[test]
fn bindgen_test_layout_virtio_crypto_config() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_config>(),
        56usize,
        concat!("Size of: ", stringify!(virtio_crypto_config))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_config>(),
        8usize,
        concat!("Alignment of ", stringify!(virtio_crypto_config))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_crypto_config>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_config),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_config>())).max_dataqueues as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_config),
            "::",
            stringify!(max_dataqueues)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_config>())).crypto_services as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_config),
            "::",
            stringify!(crypto_services)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_config>())).cipher_algo_l as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_config),
            "::",
            stringify!(cipher_algo_l)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_config>())).cipher_algo_h as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_config),
            "::",
            stringify!(cipher_algo_h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_crypto_config>())).hash_algo as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_config),
            "::",
            stringify!(hash_algo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_crypto_config>())).mac_algo_l as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_config),
            "::",
            stringify!(mac_algo_l)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_crypto_config>())).mac_algo_h as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_config),
            "::",
            stringify!(mac_algo_h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_crypto_config>())).aead_algo as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_config),
            "::",
            stringify!(aead_algo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_config>())).max_cipher_key_len as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_config),
            "::",
            stringify!(max_cipher_key_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_crypto_config>())).max_auth_key_len as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_config),
            "::",
            stringify!(max_auth_key_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_crypto_config>())).reserve as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_config),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_crypto_config>())).max_size as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_config),
            "::",
            stringify!(max_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct virtio_crypto_inhdr {
    pub status: __u8,
}
#[test]
fn bindgen_test_layout_virtio_crypto_inhdr() {
    assert_eq!(
        ::std::mem::size_of::<virtio_crypto_inhdr>(),
        1usize,
        concat!("Size of: ", stringify!(virtio_crypto_inhdr))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_crypto_inhdr>(),
        1usize,
        concat!("Alignment of ", stringify!(virtio_crypto_inhdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_crypto_inhdr>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_crypto_inhdr),
            "::",
            stringify!(status)
        )
    );
}
