/* automatically generated by rust-bindgen */

pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const VIRTIO_ID_ACCEL: u32 = 21;
pub const VIRTIO_ACCEL_S_HW_READY: u32 = 1;
pub const VIRTIO_ACCEL_OK: u32 = 0;
pub const VIRTIO_ACCEL_ERR: u32 = 1;
pub const VIRTIO_ACCEL_BADMSG: u32 = 2;
pub const VIRTIO_ACCEL_NOTSUPP: u32 = 3;
pub const VIRTIO_ACCEL_INVSESS: u32 = 4;
pub const VIRTIO_ACCEL_C_NO_CIPHER: u32 = 0;
pub const VIRTIO_ACCEL_C_CIPHER_AES_ECB: u32 = 1;
pub const VIRTIO_ACCEL_C_CIPHER_AES_CBC: u32 = 2;
pub const VIRTIO_ACCEL_C_CIPHER_AES_CTR: u32 = 3;
pub const VIRTIO_ACCEL_C_CIPHER_AES_XTS: u32 = 4;
pub const VIRTIO_ACCEL_NO_OP: u32 = 0;
pub const VIRTIO_ACCEL_G_OP_CREATE_SESSION: u32 = 1;
pub const VIRTIO_ACCEL_G_OP_DESTROY_SESSION: u32 = 2;
pub const VIRTIO_ACCEL_G_OP_DO_OP: u32 = 3;
pub const VIRTIO_ACCEL_C_OP_CIPHER_CREATE_SESSION: u32 = 4;
pub const VIRTIO_ACCEL_C_OP_CIPHER_DESTROY_SESSION: u32 = 5;
pub const VIRTIO_ACCEL_C_OP_CIPHER_ENCRYPT: u32 = 6;
pub const VIRTIO_ACCEL_C_OP_CIPHER_DECRYPT: u32 = 7;
pub const VIRTIO_ACCEL_C_OP_HASH_CREATE_SESSION: u32 = 8;
pub const VIRTIO_ACCEL_C_OP_MAC_CREATE_SESSION: u32 = 9;
pub const VIRTIO_ACCEL_C_OP_AEAD_CREATE_SESSION: u32 = 10;
pub const VIRTIO_ACCEL_C_OP_HASH_DESTROY_SESSION: u32 = 11;
pub const VIRTIO_ACCEL_C_OP_MAC_DESTROY_SESSION: u32 = 12;
pub const VIRTIO_ACCEL_C_OP_AEAD_DESTROY_SESSION: u32 = 13;
pub const VIRTIO_ACCEL_C_OP_HASH: u32 = 14;
pub const VIRTIO_ACCEL_C_OP_MAC: u32 = 15;
pub const VIRTIO_ACCEL_C_OP_AEAD_ENCRYPT: u32 = 16;
pub const VIRTIO_ACCEL_C_OP_AEAD_DECRYPT: u32 = 17;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fsid_t>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __virtio16 = __u16;
pub type __virtio32 = __u32;
pub type __virtio64 = __u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct virtio_accel_crypto_sess {
    pub cipher: __virtio32,
    pub keylen: __virtio32,
    pub key: *mut __u8,
    pub padding: [__u8; 7usize],
}
#[test]
fn bindgen_test_layout_virtio_accel_crypto_sess() {
    assert_eq!(
        ::std::mem::size_of::<virtio_accel_crypto_sess>(),
        24usize,
        concat!("Size of: ", stringify!(virtio_accel_crypto_sess))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_accel_crypto_sess>(),
        8usize,
        concat!("Alignment of ", stringify!(virtio_accel_crypto_sess))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_accel_crypto_sess>())).cipher as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_crypto_sess),
            "::",
            stringify!(cipher)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_accel_crypto_sess>())).keylen as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_crypto_sess),
            "::",
            stringify!(keylen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_accel_crypto_sess>())).key as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_crypto_sess),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_accel_crypto_sess>())).padding as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_crypto_sess),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct virtio_accel_crypto_op {
    pub src_len: __virtio32,
    pub dst_len: __virtio32,
    pub iv_len: __virtio32,
    pub src: *mut __u8,
    pub dst: *mut __u8,
    pub iv: *mut __u8,
    pub padding: __u8,
}
#[test]
fn bindgen_test_layout_virtio_accel_crypto_op() {
    assert_eq!(
        ::std::mem::size_of::<virtio_accel_crypto_op>(),
        48usize,
        concat!("Size of: ", stringify!(virtio_accel_crypto_op))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_accel_crypto_op>(),
        8usize,
        concat!("Alignment of ", stringify!(virtio_accel_crypto_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_accel_crypto_op>())).src_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_crypto_op),
            "::",
            stringify!(src_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_accel_crypto_op>())).dst_len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_crypto_op),
            "::",
            stringify!(dst_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_accel_crypto_op>())).iv_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_crypto_op),
            "::",
            stringify!(iv_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_accel_crypto_op>())).src as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_crypto_op),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_accel_crypto_op>())).dst as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_crypto_op),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_accel_crypto_op>())).iv as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_crypto_op),
            "::",
            stringify!(iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_accel_crypto_op>())).padding as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_crypto_op),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct virtio_accel_gen_op_arg {
    pub len: __virtio32,
    pub buf: *mut __u8,
    pub usr_buf: *mut __u8,
    pub usr_pages: *mut __u8,
    pub usr_npages: __virtio32,
    pub padding: [__u8; 5usize],
}
#[test]
fn bindgen_test_layout_virtio_accel_gen_op_arg() {
    assert_eq!(
        ::std::mem::size_of::<virtio_accel_gen_op_arg>(),
        48usize,
        concat!("Size of: ", stringify!(virtio_accel_gen_op_arg))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_accel_gen_op_arg>(),
        8usize,
        concat!("Alignment of ", stringify!(virtio_accel_gen_op_arg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_accel_gen_op_arg>())).len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_gen_op_arg),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_accel_gen_op_arg>())).buf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_gen_op_arg),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_accel_gen_op_arg>())).usr_buf as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_gen_op_arg),
            "::",
            stringify!(usr_buf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_accel_gen_op_arg>())).usr_pages as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_gen_op_arg),
            "::",
            stringify!(usr_pages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_accel_gen_op_arg>())).usr_npages as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_gen_op_arg),
            "::",
            stringify!(usr_npages)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_accel_gen_op_arg>())).padding as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_gen_op_arg),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct virtio_accel_gen_op {
    pub in_nr: __virtio32,
    pub out_nr: __virtio32,
    pub in_: *mut virtio_accel_gen_op_arg,
    pub out: *mut virtio_accel_gen_op_arg,
}
#[test]
fn bindgen_test_layout_virtio_accel_gen_op() {
    assert_eq!(
        ::std::mem::size_of::<virtio_accel_gen_op>(),
        24usize,
        concat!("Size of: ", stringify!(virtio_accel_gen_op))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_accel_gen_op>(),
        8usize,
        concat!("Alignment of ", stringify!(virtio_accel_gen_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_accel_gen_op>())).in_nr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_gen_op),
            "::",
            stringify!(in_nr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_accel_gen_op>())).out_nr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_gen_op),
            "::",
            stringify!(out_nr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_accel_gen_op>())).in_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_gen_op),
            "::",
            stringify!(in_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_accel_gen_op>())).out as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_gen_op),
            "::",
            stringify!(out)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct virtio_accel_hdr {
    pub session_id: __virtio32,
    pub op: __virtio32,
    pub u: virtio_accel_hdr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union virtio_accel_hdr__bindgen_ty_1 {
    pub crypto_sess: virtio_accel_crypto_sess,
    pub crypto_op: virtio_accel_crypto_op,
    pub gen_op: virtio_accel_gen_op,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_virtio_accel_hdr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<virtio_accel_hdr__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(virtio_accel_hdr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_accel_hdr__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(virtio_accel_hdr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_accel_hdr__bindgen_ty_1>())).crypto_sess as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_hdr__bindgen_ty_1),
            "::",
            stringify!(crypto_sess)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_accel_hdr__bindgen_ty_1>())).crypto_op as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_hdr__bindgen_ty_1),
            "::",
            stringify!(crypto_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_accel_hdr__bindgen_ty_1>())).gen_op as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_hdr__bindgen_ty_1),
            "::",
            stringify!(gen_op)
        )
    );
}
#[test]
fn bindgen_test_layout_virtio_accel_hdr() {
    assert_eq!(
        ::std::mem::size_of::<virtio_accel_hdr>(),
        56usize,
        concat!("Size of: ", stringify!(virtio_accel_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_accel_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(virtio_accel_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_accel_hdr>())).session_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_hdr),
            "::",
            stringify!(session_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_accel_hdr>())).op as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_hdr),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_accel_hdr>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_hdr),
            "::",
            stringify!(u)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct virtio_accel_crypto_conf {
    pub max_cipher_key_len: __u32,
    pub max_auth_key_len: __u32,
}
#[test]
fn bindgen_test_layout_virtio_accel_crypto_conf() {
    assert_eq!(
        ::std::mem::size_of::<virtio_accel_crypto_conf>(),
        8usize,
        concat!("Size of: ", stringify!(virtio_accel_crypto_conf))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_accel_crypto_conf>(),
        4usize,
        concat!("Alignment of ", stringify!(virtio_accel_crypto_conf))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_accel_crypto_conf>())).max_cipher_key_len as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_crypto_conf),
            "::",
            stringify!(max_cipher_key_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_accel_crypto_conf>())).max_auth_key_len as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_crypto_conf),
            "::",
            stringify!(max_auth_key_len)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct virtio_accel_conf {
    pub status: __u32,
    pub services: __u32,
    pub max_size: __u64,
    pub u: virtio_accel_conf__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union virtio_accel_conf__bindgen_ty_1 {
    pub crypto: virtio_accel_crypto_conf,
    _bindgen_union_align: [u32; 2usize],
}
#[test]
fn bindgen_test_layout_virtio_accel_conf__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<virtio_accel_conf__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(virtio_accel_conf__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_accel_conf__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(virtio_accel_conf__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<virtio_accel_conf__bindgen_ty_1>())).crypto as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_conf__bindgen_ty_1),
            "::",
            stringify!(crypto)
        )
    );
}
#[test]
fn bindgen_test_layout_virtio_accel_conf() {
    assert_eq!(
        ::std::mem::size_of::<virtio_accel_conf>(),
        24usize,
        concat!("Size of: ", stringify!(virtio_accel_conf))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_accel_conf>(),
        8usize,
        concat!("Alignment of ", stringify!(virtio_accel_conf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_accel_conf>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_conf),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_accel_conf>())).services as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_conf),
            "::",
            stringify!(services)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_accel_conf>())).max_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_conf),
            "::",
            stringify!(max_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<virtio_accel_conf>())).u as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_accel_conf),
            "::",
            stringify!(u)
        )
    );
}
